<!--Kalenderen-->
<div class="calendar">
    <div class="row">
        <div class="col-sm-12 col-lg-2">
            <select class="fluent-input" @onchange="SelectYear">
                @for(int i = 2021; i < 2026; i++)
                {
                    <option>@i</option>
                }
            </select>
        </div>
        <div class="col-sm-12 col-lg-2">
            <select class="fluent-input" @onchange="SelectMonth">
                <option value="1">Jan</option>
                <option value="2">Feb</option>
                <option value="3">Mar</option>
                <option value="4">Apr</option>
                <option value="5" selected>Mai</option>
                <option value="6">Jun</option>
                <option value="7">Jul</option>
                <option value="8">Aug</option>
                <option value="9">Sep</option>
                <option value="10">Okt</option>
                <option value="11">Nov</option>
                <option value="12">Des</option>
            </select>
        </div>
    </div>
    <table class="calendar-table">
        <thead>
            <tr>
                <td>Søn</td>
                <td>Man</td>
                <td>Tir</td>
                <td>Ons</td>
                <td>Tor</td>
                <td>Fre</td>
                <td>Lør</td>
            </tr>
        </thead>
        <tbody>
            @for (int r = 0; r < rowsCount; r++)
            {
                <tr>
                    @foreach(var item in days.Skip(r * 7).Take(7))
                    {
                        <td>@DayTemplate(item)</td>
                    }
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    // Variables
    [Parameter] public RenderFragment<CalendarDay> DayTemplate { get; set; }

    private int year = 2021;

    private int month = 05;

    private List<CalendarDay> days = new List<CalendarDay>();

    private int rowsCount = 0;

    // Når siden starter oppdater kalenderen
    protected override void OnInitialized()
    {
        UpdateCalendar();
    }

    void SelectYear(ChangeEventArgs e)
    {
        year = Convert.ToInt32(e.Value.ToString());
        // Render Callendar
        UpdateCalendar();
    }

    void SelectMonth(ChangeEventArgs e)
    {
        month = Convert.ToInt32(e.Value.ToString());
        // Render Callendar
        UpdateCalendar();
    }

    // I denne funksjonen finner du koden til og oppdatere kalenderen
    // her har jeg brukt matte for og finne ut av hvor mange blanke dager det er
    // i måneden
    void UpdateCalendar()
    {
        days = new List<CalendarDay>();

        // Calculate the number of empty days

        var firstDayDate = new DateTime(year, month, 1);
        int weekDayNumber = (int)firstDayDate.DayOfWeek;
        int numberOfEmptyDays = 0;
        if(weekDayNumber == 7)
        {
            numberOfEmptyDays = 0;
        }else
        {
            numberOfEmptyDays = weekDayNumber;
        }

        //Add Empty days

        for(int i = 0; i < numberOfEmptyDays; i++)
        {
            days.Add(new CalendarDay
            {
                DayNumber = 0,
                IsEmpty = true
            }) ;
        }

        //Add Month days
        int numberOfDaysInMonth = DateTime.DaysInMonth(year, month);

        for(int i = 0; i < numberOfDaysInMonth; i++)
        {
            days.Add(new CalendarDay
            {
                DayNumber = i + 1,
                IsEmpty = false,
                Date = new DateTime(year, month, i + 1)
            });
        }

        // Calculate number of rows

        int remaining = days.Count % 7;
        if (remaining == 0)
            rowsCount = days.Count / 7;
        else
            rowsCount = Convert.ToInt32(days.Count / 7) + 1;
    }
}